/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lecturer.gui;

import common.code.Auth;
import common.code.MyDbConnector;
import common.code.UserProfile;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import lecturer.Lecturer;

/**
 *
 * @author Kavindu_Dilhara
 */


public class AddFinalMarks extends javax.swing.JFrame {
    
    private Lecturer lecturer;
    
    private MyDbConnector dbConnector;
    Connection connection = null;
    ResultSet rs = null;
    PreparedStatement preStmt = null;
    
    UserProfile loggedUser = Auth.getLoggedUser();
    String email = loggedUser.getEmail();
    private String studentID;
    
    

    /**
     * Creates new form AddFinalMarks
     */
    
    
    public AddFinalMarks() {
        initComponents();
        
    }
    
    public AddFinalMarks (Lecturer lecturer) {
        this.lecturer = lecturer;
        dbConnector = new MyDbConnector();
        initComponents();
    }
    
    
    public void updateStudentID(String studentID) {
    this.studentID=studentID;
    txt_stdID.setText(studentID);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        lbl_stdID = new javax.swing.JLabel();
        txt_stdID = new javax.swing.JTextField();
        btn_addMarks = new javax.swing.JButton();
        btn_clearMarks = new javax.swing.JButton();
        lbl_courseID = new javax.swing.JLabel();
        combo_courseID = new javax.swing.JComboBox<>();
        lbl_fPrac = new javax.swing.JLabel();
        txt_fPrac = new javax.swing.JTextField();
        txt_fTheory = new javax.swing.JTextField();
        lbl_fTheory = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txt_copy1 = new javax.swing.JLabel();
        txt_copy2 = new javax.swing.JLabel();
        txt_copy3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btn_Bck = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_stdID.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbl_stdID.setText("Student ID :");
        jPanel4.add(lbl_stdID, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 61, 74, 25));
        jPanel4.add(txt_stdID, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 60, 158, 25));

        btn_addMarks.setText("ADD");
        btn_addMarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addMarksActionPerformed(evt);
            }
        });
        jPanel4.add(btn_addMarks, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, 70, -1));

        btn_clearMarks.setText("CLEAR");
        btn_clearMarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearMarksActionPerformed(evt);
            }
        });
        jPanel4.add(btn_clearMarks, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 300, -1, -1));

        lbl_courseID.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbl_courseID.setText("Course ID :");
        jPanel4.add(lbl_courseID, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 74, 25));

        combo_courseID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "ICT01", "ICT02", "ICT03", "ICT04", "ICT05", "TMS01" }));
        combo_courseID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_courseIDActionPerformed(evt);
            }
        });
        jPanel4.add(combo_courseID, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 92, -1));

        lbl_fPrac.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbl_fPrac.setText(" Final Practical  :");
        jPanel4.add(lbl_fPrac, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, -1, 26));
        jPanel4.add(txt_fPrac, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 210, 158, 25));
        jPanel4.add(txt_fTheory, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 160, 158, 25));

        lbl_fTheory.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbl_fTheory.setText("Final Theory  :");
        jPanel4.add(lbl_fTheory, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 160, -1, 25));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 1250, 490));

        jPanel1.setBackground(new java.awt.Color(104, 164, 236));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_copy1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_copy1.setForeground(new java.awt.Color(255, 255, 255));
        txt_copy1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txt_copy1.setText("Lecturer Pannel");
        jPanel1.add(txt_copy1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, 20));

        txt_copy2.setBackground(new java.awt.Color(255, 255, 255));
        txt_copy2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_copy2.setForeground(new java.awt.Color(255, 255, 255));
        txt_copy2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_copy2.setText("Â© Faculty of Technology,");
        jPanel1.add(txt_copy2, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 130, -1, -1));

        txt_copy3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_copy3.setForeground(new java.awt.Color(255, 255, 255));
        txt_copy3.setText("University of Ruhuna.");
        jPanel1.add(txt_copy3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 130, -1, 20));

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("ADD FINAL MARKS");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 80, -1, -1));

        btn_Bck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/backbtn.png"))); // NOI18N
        btn_Bck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_BckMouseClicked(evt);
            }
        });
        jPanel1.add(btn_Bck, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 10, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1250, 160));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public double hidePracField(String c_ID) {
        double fPrac = 0.0;
        if (c_ID.equals("ICT02")) {
            txt_fPrac.setEnabled(false);
            txt_fPrac.setText(""); // Clear the value
            return 0.0;
        } else {
            String fPracText = txt_fPrac.getText();
            if (!fPracText.isEmpty()) {
                fPrac = Double.parseDouble(fPracText);
            }
            txt_fPrac.setEnabled(true);
            return fPrac;
        }
    }
    
    /**
     * Checks if a student is eligible for a specific course based on their student ID and course ID.
     *
     * @param stdID     the student ID
     * @param courseID  the course ID
     * @return true if the student is eligible, false otherwise
     */
    private boolean isEligible(String stdID, String courseID) {
        try {
            dbConnector = new MyDbConnector();
            System.out.println("Succeed...");

            try {
                connection = dbConnector.getMyConnection();
                String query = "SELECT Eligibility FROM marks WHERE userID = ? AND CourseID = ?";
                PreparedStatement preStmt = connection.prepareStatement(query);

                preStmt.setString(1, stdID);
                preStmt.setString(2, courseID);

                ResultSet rs = preStmt.executeQuery();

                if (rs.next()) {
                    String eligibility = rs.getString("Eligibility");

                    if (eligibility.equalsIgnoreCase("Eligible")) {
                        // The student is eligible for the course
                        return true;
                    }
                }
            } catch (SQLException e) {
                System.out.println(e);
            } finally {
                // Close the result set, statement, and connection in the finally block
                try {
                    if (connection != null) {
                        connection.close();
                    }
                } catch (SQLException e) {
                    System.out.println("Error in closing database connection: " + e.getMessage());
                }
            }

            // The student is not eligible for the course or an error occurred
            return false;
        } catch (Exception e) {
            System.out.println("dbConnector not assigned: " + e.getMessage());
            return false;
        }
    }
    
    /**
    * Adds the student marks for the selected course.
    *
    * @return true if the marks are added successfully, false otherwise
    */
    private boolean addStudentMarks() {
        try {
            dbConnector = new MyDbConnector();
            System.out.println("Succeed...");

            connection = dbConnector.getMyConnection();

            String stdID = txt_stdID.getText();
            String courseID = (String) combo_courseID.getSelectedItem();
            double fPrac = hidePracField(courseID);
            double fTheory = Double.parseDouble(txt_fTheory.getText());

            String query = "UPDATE marks SET FinalPrac = ?, FinalTheory = ? WHERE userID = ? AND CourseID = ?";
            PreparedStatement preStmt = connection.prepareStatement(query);

            // Set the practical and theory marks in the prepared statement
            boolean isEligibleFlag = isEligible(stdID, courseID);
            System.out.println(isEligibleFlag);
            if (isEligibleFlag) {
                System.out.println(fPrac);
                System.out.println(fTheory);
            preStmt.setDouble(1, fPrac);
            preStmt.setDouble(2, fTheory);
            txt_fPrac.setVisible(true);
            txt_fTheory.setVisible(true);
            txt_fPrac.setEnabled(true);
            txt_fTheory.setEnabled(true);
            if (combo_courseID.getSelectedItem().equals("ICT02")) {
                txt_fPrac.setVisible(false); // Hide the field
                lbl_fPrac.setVisible(false); // Hide the label
            }
            } else {
            preStmt.setDouble(1, 0);
            preStmt.setDouble(2, 0);
            txt_fPrac.setVisible(false);
            txt_fTheory.setVisible(false);
            txt_fPrac.setEnabled(false);
            txt_fTheory.setEnabled(false);

            }

            // Set the student ID and course ID in the prepared statement
            preStmt.setString(3, stdID);
            preStmt.setString(4, courseID);

            System.out.println(preStmt.toString());

            int rowsUpdated = preStmt.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(null, "Data added successfully...");
                clearInputFields();
                return true;
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add data...");
            }
        } catch (SQLException e) {
            if (e.getMessage().contains("Duplicate entry")) {
                int option = JOptionPane.showConfirmDialog(null, "Error: Duplicate entry. The combination of userID and courseID already exists. Overwrite the existing data?", "Duplicate Entry", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    return addStudentMarks();
                }
            } else {
                System.out.println("Error in adding student marks: " + e.getMessage());
            }
        } catch (NumberFormatException e) {
            System.out.println("Invalid input format: " + e.getMessage());
        } finally {
            // Close the database connection in the finally block
            try {
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                System.out.println("Error in closing database connection: " + e.getMessage());
            }
        }

        return false;
    }

   private void clearInputFields() {
    txt_fPrac.setText("");
    txt_fTheory.setText("");
}







    
    private void btn_clearMarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearMarksActionPerformed
        // TODO add your handling code here:
        txt_fPrac.setText("");
        txt_fTheory.setText("");
    }//GEN-LAST:event_btn_clearMarksActionPerformed

    private void btn_addMarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addMarksActionPerformed
        addStudentMarks();
    }//GEN-LAST:event_btn_addMarksActionPerformed

    private void combo_courseIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_courseIDActionPerformed
        String c_ID = (String) combo_courseID.getSelectedItem();

        if (c_ID != null && c_ID.equals("ICT02")) {
            String stdID = txt_stdID.getText();
            if (stdID != null && !stdID.isEmpty()) {
                if (isEligible(stdID, c_ID)) {
                    hidePracField(c_ID);
                    txt_fTheory.setVisible(true);
                    lbl_fTheory.setVisible(true);
                    btn_addMarks.setVisible(true);
                    btn_clearMarks.setVisible(true);
                    txt_fPrac.setVisible(false);
                    lbl_fPrac.setVisible(false);
                }else {
                    hidePracField(c_ID);
                    txt_fPrac.setVisible(false);
                    lbl_fPrac.setVisible(false);
                    txt_fTheory.setVisible(false);
                    lbl_fTheory.setVisible(false);
                    btn_addMarks.setVisible(false);
                    btn_clearMarks.setVisible(false);
                    JOptionPane.showMessageDialog(null, "Student is NOT ELIGIBLE for this Course...");
                }

            }

        } else {
            String stdID = txt_stdID.getText();
            if (stdID != null && !stdID.isEmpty()) {
                if (isEligible(stdID, c_ID)) {
                    hidePracField(c_ID);
                    txt_fPrac.setVisible(true);
                    lbl_fPrac.setVisible(true);
                    txt_fTheory.setVisible(true);
                    lbl_fTheory.setVisible(true);
                    btn_addMarks.setVisible(true);
                    btn_clearMarks.setVisible(true);
                } else {
                    hidePracField(c_ID);
                    txt_fPrac.setVisible(false);
                    lbl_fPrac.setVisible(false);
                    txt_fTheory.setVisible(false);
                    lbl_fTheory.setVisible(false);
                    btn_addMarks.setVisible(false);
                    btn_clearMarks.setVisible(false);
                    JOptionPane.showMessageDialog(null, "Student is NOT ELIGIBLE for this Course...");
                }
            } else {
                txt_fPrac.setVisible(false); 
                lbl_fPrac.setVisible(false); 
                lbl_fTheory.setVisible(false); 
                btn_addMarks.setVisible(false); 
                btn_clearMarks.setVisible(false); 
            }
        }
    }//GEN-LAST:event_combo_courseIDActionPerformed

    private void btn_BckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_BckMouseClicked
        lecturer.back(lecturer);
        this.dispose();
    }//GEN-LAST:event_btn_BckMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddFinalMarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddFinalMarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddFinalMarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddFinalMarks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddFinalMarks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btn_Bck;
    private javax.swing.JButton btn_addMarks;
    private javax.swing.JButton btn_clearMarks;
    private javax.swing.JComboBox<String> combo_courseID;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lbl_courseID;
    private javax.swing.JLabel lbl_fPrac;
    private javax.swing.JLabel lbl_fTheory;
    private javax.swing.JLabel lbl_stdID;
    private javax.swing.JLabel txt_copy1;
    private javax.swing.JLabel txt_copy2;
    private javax.swing.JLabel txt_copy3;
    private javax.swing.JTextField txt_fPrac;
    private javax.swing.JTextField txt_fTheory;
    private javax.swing.JTextField txt_stdID;
    // End of variables declaration//GEN-END:variables
}
